# -*- coding: utf-8 -*-
"""Sales data Vizualization .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ptRpOg2tOREzlPXQvZpc7DVVPj-zrPEX

Modul ini bertujuan untuk mempelajari visualisasi data dengan mengunakan seaborn. data yang diambil adalah data yang diperoleh dari keggele 

This module is aim to study data vizualization using seabporn. data used is received from keggel
"""

import pandas as pd 
import seaborn as sns
import matplotlib.pyplot as plt

"""Melihat data dengan data.head()"""

data = pd.read_csv('supermarket_sales.csv')
data.head()

"""Melihat informasi data (Missing value/yang lain). Non Null mengartikan data tidak ada missing value. dan 0 pada isnull 


"""

data.info()

data.isnull().sum()

data.describe()

"""# 1. Sales For each branches vizualization """

Branch = data.Branch.value_counts().reset_index()
Branch

#Visualisasi data dengan Pie Chart 
#plt.pie(Branch.Branch, Labels = Branch['Index])
# plt : Lib, branch : data, labels : index)

plt.pie(Branch.Branch, labels = Branch['index'], autopct='%1.1f%%')
plt.title('Sales From Different Branch')
plt.show()

#Vertical Bar chart using Seaborn
# X adalah data index (A,B,C)
# Y adalah data Branch (Jumlah value)
# Set Title (menambahkan title untuk grafik yang di tampilkan) 

sns.barplot(x='index', y='Branch', data=Branch).set(title='Sales From Different Branch')

# Vertical Chart dapat dibuat dengan membalikan nilai X dan Y 

sns.barplot(x='Branch', y='index', data=Branch).set(title='Sales From Different Branch')

"""# 2. Sales for each Product Line """

# Menampilkan data product Line dan jumlah product line nya 
# Mensortir data dengan menampilkan product line dan group by 

product = data.groupby('Product line').size().to_frame(name = 'count').reset_index()
product

# Menampilkan visualisasi data 
#Bar Plot memerlukan data X dan Y 
plt.figure(figsize = (12,6))

sns.barplot(y='count', x='Product line', data = product)
plt.title("Sales of Different Kinds of Products")
plt.xlabel("Product line")
plt.ylabel("Count")

plt.show()

# Bar chart menggunakan CountPlot 
# Count Plot hanya perlu data X dan menghitung sendiri data Y 
plt.figure(figsize = (12,6))
sns.countplot(x='Product line', data = data)
plt.xlabel('Product Line')
plt.ylabel('Count')
plt.show()

# Bar Chart menggunakan cpuntplot, perlu data x  
#Merubah axis 
#Hue : membreakdown tiap tiap line nya

plt.figure(figsize = (12,8))
sns.countplot(y ='Product line', hue = 'Branch', data = data)
plt.xlabel('count')
plt.ylabel('Product type')
plt.show()

"""# Gross Income in certain date range

melihat data gross income untuk rentang waktu tertentu 
"""

dates = data[['Date', 'gross income']].groupby('Date').sum()

plt.figure(figsize= (16,8))
sns.lineplot(data=dates[:10], x="Date", y="gross income")

"""# Is there any relationship between Rating dan Total Sales?

agar dapat mengetahui apakah ada hubungan antara rating dan total sales digunakan scatter plot untuk mengetahui ini. setelah di telusuri, tidak ada hubungan antara rating dan total sales melalui gambar
"""

sns.scatterplot(data=data, x ="Rating", y="Total")